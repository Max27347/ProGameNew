import os
import sqlite3
import asyncio
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FastAPI
app = FastAPI()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://max27347.github.io"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –≤–∞—à–µ–≥–æ GitHub Pages
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    allow_headers=["Content-Type", "Authorization"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("payments.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (chat_id TEXT, payment_id TEXT, TEXT PRIMARY KEY, amount INTEGER, payload TEXT, timestamp TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram Stars üéÅ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞
@app.post("/create-invoice")
async def create_invoice(data: dict):
    try:
        product = data.get("product", "100 Diamonds")
        amount = data.get("amount", 100)
        chat_id = data.get("chat_id", "")

        bot = await Bot.create(token=BOT_TOKEN)
        invoice = await bot.create_invoice_link(
            title=product,
            description=f"Donate {amount} Diamonds to support World of Consoles",
            payload=json.dumps({"product": product, "amount": amount, "chat_id": chat_id}),
            currency="XTR",
            prices=[{"label": product, "amount": amount * 100}]
        )
        return {"invoiceLink": invoice}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
async def pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    chat_id = update.message.chat_id
    payment_id = payment.telegram_payment_charge_id
    amount = payment.total_amount // 100
    payload = payment.invoice_payload

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("payments.db")
    c = conn.cursor()
    c.execute("INSERT INTO payments (chat_id, payment_id, amount, payload, timestamp) VALUES (?, ?, ?, ?, datetime('now'))",
              (str(chat_id), payment_id, amount, payload))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} –∞–ª–º–∞–∑–æ–≤!")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def run_bot():
    bot_app = await ApplicationBuilder().token(BOT_TOKEN).build()
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(PreCheckoutQueryHandler(pre_checkout_query))
    bot_app.add_handler(MessageHandler(filters.SuccessfulPayment, successful_payment))
    await bot_app.initialize()
    await bot_app.start()
    await bot_app.updater.start_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ FastAPI
async def run_server():
    config = uvicorn.Config(app, host="0.0.0.0", port=8000)
    server = uvicorn.Server(config)
    await server.serve()
    print("FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω...")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–æ–∏—Ö
async def main():
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞...")
    await asyncio.gather(run_bot(), run_server())

if __name__ == "__main__":
    asyncio.run(main())